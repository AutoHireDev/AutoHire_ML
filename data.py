questions_and_answers = [
    { "question" : "What is the C Programming Language?", "answer_variants" : ["The C Programming Language is a general-purpose, procedural programming language developed by Dennis Ritchie at Bell Telephone Laboratories in the early 1970s. It was designed to provide low-level access to memory and features a straightforward syntax, making it well-suited for system programming and development of various applications", "C is a versatile, procedural programming language created by Dennis Ritchie at Bell Labs in the 1970s, designed for efficient system programming and application development."]},
    { "question" :"What are the key features of C?" , "answer_variants" : ["C is known for its simplicity, efficiency, and flexibility. It provides low-level access to memory through pointers, supports structured programming, and has a rich set of operators. It also allows direct manipulation of bits, making it suitable for tasks like device drivers and embedded systems.","C is prized for its simplicity, efficiency, and flexibility. Its features include a straightforward syntax, low-level memory access through pointers, and support for structured programming."]},
    { "question" :"How does memory management work in C?" , "answer_variants": ["C allows manual memory management through functions like malloc() and free(), providing control over dynamic memory allocation. Programmers are responsible for allocating and deallocating memory, which gives them fine-grained control but also requires careful management to avoid memory leaks and other issues.", "Memory management in C involves manual allocation and deallocation using functions like malloc() and free(). Programmers have control over memory, but careful management is essential to avoid issues like memory leaks."]},
    { "question" : "What is the significance of pointers in C?", "answer_variants": ["Pointers in C allow direct manipulation of memory addresses. They are powerful but require careful handling to avoid issues like segmentation faults. Pointers are commonly used for dynamic memory allocation, creating data structures, and optimizing certain operations.", "Pointers in C enable direct manipulation of memory addresses, crucial for tasks like dynamic memory allocation and optimizing certain operations. However, they require careful handling to prevent errors."]},
    {"question" : "Explain the role of header files in C.", "answer_variants": ["Header files in C contain declarations and definitions that can be included in source code files. They help organize code by providing a way to declare functions, macros, and data types that can be used in multiple files. Commonly used header files include <stdio.h> for input/output functions and <stdlib.h> for memory allocation.", "Header files in C organize code by providing declarations and definitions. They facilitate code reuse across multiple files and commonly include functions and data types."]},
    {"question" : "What is the importance of the 'main' function in a C program?", "answer_variants": ["The 'main' function is the entry point of a C program. When the program is executed, the control starts from the 'main' function. It typically contains statements that define the execution flow of the program, making it a crucial part of any C program.", "The 'main' function is the starting point of a C program, defining its execution flow. It contains statements that dictate how the program operates and is a fundamental component of any C program."]},
    {"question" : "How does C support file handling?", "answer_variants": ["C provides a set of standard I/O functions, such as fopen(), fclose(), fread(), and fwrite(), to perform file operations. These functions enable reading from and writing to files, allowing C programs to interact with external data stored in files.", "C supports file handling through standard I/O functions like fopen(), fclose(), fread(), and fwrite(). These functions allow reading from and writing to files, enabling interaction with external data."]},
    {"question" : "What is the role of the preprocessor in C?", "answer_variants": ["The C preprocessor performs tasks before actual compilation, such as macro substitution, file inclusion, and conditional compilation. It is responsible for manipulating the source code before it goes through the compiler, helping in code organization and optimization.", "The C preprocessor executes tasks before compilation, such as macro substitution and conditional compilation. It aids in code organization and optimization by manipulating the source code before it reaches the compiler."]},
    {"question" : "How does C support functions?", "answer_variants": ["C supports functions, which are blocks of code that perform a specific task. Functions facilitate code modularization and reusability. They are declared with a return type, function name, parameters, and a body containing the code to be executed.", "C supports functions as modular blocks of code with a specified return type, function name, parameters, and body. They promote code organization and reusability by encapsulating specific tasks."]},
    {"question" : "Can you explain the difference between 'stack' and 'heap' memory in C?", "answer_variants": ["In C, the stack is used for storing local variables and function call information, and memory allocation and deallocation are handled automatically. On the other hand, the heap is used for dynamic memory allocation, and programmers must manage memory explicitly using functions like malloc() and free(). The stack is generally faster but has limited size, while the heap is more flexible but can lead to memory fragmentation.", "In C, the stack stores local variables and function call information, with automatic memory management. The heap is used for dynamic memory allocation, requiring explicit management. While the stack is faster, it has limited size, and the heap offers flexibility but may lead to fragmentation."]},
]
